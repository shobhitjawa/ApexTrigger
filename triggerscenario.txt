trigger CalculateAmount on Issue_Link__c(after insert, after update){
	Set<Id> issueIds= new Set<Id>;
	if(Trigger.isInsert){
	for(Issue_Link__c issue : Trigger.new){
		issueIds.add(issue.IssueId);
	}
	if(Trigger.isUpdate){
	for(Issue_Link__c issueUpd: Trigger.new){
		if(issueUpd.IssueId!=Trigger.oldMap.get(issueUpd.Id).IssueId){
			issueIds.add(issueUpd.IssueId);
		}
		else{
			issueIds.add(Trigger.oldMap.get(issueUpd.Id).IssueId);
		} 
	}
	}
	
	List<Issue__c> updateIssue= [Select Id, Name, (select amount from Issue_Link__r) from 
        Issue__c where Id in: issueIds];
	for(Issue__c newIssue: updateIssue){
	for(Issue_Link__c issueLink: newIssue.Issue_Link__r){
		newIssue.totalamount+= Math.pow(issueLink.amount,3);
	}
	
	}
	
	update updateIssue;
	
}

------------------------------------------------------------------------------------------
trigger sendEmailToAdmin on Account (after insert){ 
List<Messaging.SingleEmailMessage> mails = new List<Messaging.SingleEmailMessage>(); 
User userObj=[select Id,Profile.Name,Email from user where Profile.Name='System Administrator'];
for(Account accObj:Trigger.new){ 
if(userObj.Email!=null){ 
Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage(); 
mail.setSenderDisplayName('Salesforce'); 
mail.setUseSignature(false);
mail.setBccSender(false);
mail.setSaveAsActivity(false); 
mail.toAddresses = new String[]{userObj.Email}; 
mail.setSubject('New Account was Created.'); 
String body = 'Dear System Administrator, <br/>';
body += 'An account has been created and name is '+accObj.Name+'.'; 
mail.setHtmlBody(body); 
mails.add(mail);
}
} 
if(mails.size()>0){ 
Messaging.SendEmailResult[] results = Messaging.sendEmail(mails); 
if (results[0].success)
{
System.debug('The email was sent successfully.');
} else {
System.debug('The email failed to send: '+ results[0].errors[0].message);
}
}
}